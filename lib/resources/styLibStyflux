#!/usr/bin/env node

var fs=require('fs'),
	os=require('os'),
	path=require('path'),
	exec = require('child_process').exec,child;

(function(styflux){
	/* Utils */
	styflux.createDirectory=function(path,name,callback){ //Crea directorios
		fs.mkdir(path+"/"+name, 0777, function(err){
			(err!=null)?console.log("Ya existe el directorio "+path+"/"+name):callback&&callback();			
		});
	};
	styflux.createFile=function(path,content,callback){ //Crea archivos
		var cont=content || "";
		fs.writeFile(path, cont,function (err) {
			if (err) throw err;
			callback&&callback();
		});
	};
	styflux.readFile=function(path,callback){ //Lee archivos
		fs.readFile(path, function (err,data) {
			if (err) throw err;
			callback&&callback(data);
		});
	};
	styflux.hiddenWin=function(path){ //Oculta un archivo en windows
		child=exec("ATTRIB -S -R +H "+path,function (err, stdout, stderr) {
			if (err) throw err;
		});
	};
	styflux.tmpFile=function(file,callback){ //Genera un archivo temporal		
		var _this=this,
			flagWin=('win32' == os.platform())?true:false,
			fname=path.basename(file,".styl"),
			routeTmp=file.split(path.basename(file)).join("")+fname;
		_this.readFile(file,function(data){
			_this.createFile(routeTmp,data,function(){
				if(flagWin){_this.hiddenWin(routeTmp);}
				callback&&callback(data,routeTmp);
			});
		});
	};
	styflux.pathRelative=function(from,to){ //Obtiene ruta relativa
		var rpta=path.relative(from,to);
		return rpta.slice(3);
	};
	styflux.interpretPrefix=function(route,file){ //Interprete de prefijos . Route (Ruta de archivo que contiene los imports) y file (Ruta de la importacion)
		var _this=this,
			flagWin=('win32' == os.platform())?true:false,
			json={
				"prepend":"", //Devuelve todos los imports que van al inicio del contenido
				"append":"", //Devuelve todos los imports que van al final del contenido
				"last":"" //Devuelve todos los imports que van al final
			},
			rout=this.pathRelative(route,file.replace(/\[\@[0-9a-zA-Z]+\]/g,"")), //ruta del archivo final			
			arrs=file.match(/\[\@[0-9a-zA-Z]+\]/g); //Devuelve todos los prefijos en un array
			interpret={
				"[@inc]":function(){ //Le quita todos los ../
					rout=(flagWin)?rout.replace(/\.\.\\/g,""):rout.replace(/\.\.\//gi,"");
				},
				"[@pp]":function(){ //Identifica que va al final del documento
					json.prepend=json.prepend+"\n@import '"+rout+"'";
				},
				"[@ult]":function(){ //Identifica que debe ir al final de todos los includes
					json.last=json.last+"\n@import '"+rout+"'";
				},
				"default":function(){ //Identifica que debe ir al inicio del documento
					json.append=json.append+"@import '"+rout+"'\n";
				}
			};
		if(arrs!=null){
			arrs.forEach(function(arr){
				interpret[arr]();
			});
			(arrs.length==1&&arrs.indexOf("[@inc]")>=0)?interpret["default"]():"";
		}else{
			interpret["default"]();
		}
		return json;
	};
	/* Fin Utils */
	styflux.createRoutes=function(arrs){ //Crea las rutas para los helpers y los includes. En el callback devuelve la ruta y el nombre del archivo
		var route={
				"helpers":"./view-helpers/",
				"includes":"[@inc]"
			},
			_this=this,
		json=arrs.json || {}, //Json 
		result=arrs.result || "", //Respuesta
		callback=arrs.callback; //Callback
		if(json.constructor==Object){
			var arr=json;
			for(var index in arr){
				(function(index,arr,result,_this){
					if(typeof route[index]!="undefined"){
						_this.createRoutes({"json":arr[index],"result":route[index],"callback":callback});
					}else{
						var rsp=result+index;
						(typeof arr[index]=="string")?callback(rsp+"/"+arr[index],arr[index]):_this.createRoutes({"json":arr[index],"result":rsp,"callback":callback});
					}

				})(index,arr,result,_this);
			}
		}else if(json.constructor==Array){
			json.forEach(function(file){
				callback&&callback(result+"/"+file,file);
			});
		}
	};
	styflux.appendFile=function(route,vars,imports,data,callback){ //Agrega data al inicio del archivo
		//@route Ruta del Archivo a agregar data. Formato: PATH + file
		//@vars JSON de Variables que se van asociar al archivo
		//@imports JSON de Importaciones del archivo
		//@data Data del archivo original
		var _this=this,
			file=path.basename(route), //Nombre del archivo
			arr=vars || {}, //Array de variables
			content=data || "",  //Almacena la data del archivo
			attr="", //Variable temporal que almacena los valores de cada variable
			global="", //Almacena toda las variables globales
			tmpVarObj= null, //Almacena temporalmento un objeto correspondiente a las variables
			privateVar="", //Almacena las variables que solo se usaran en
			prepend="", //Almacena un string de los includes que van al inicio del archivo
			append="", //Almacena un string de los includes que van al final del archivo
			last=""; // Almacena un string de los includes que van al final de los includes.

		/* Interprete de Variables */
		for(var index in arr){
			if(arr[index].constructor==Object){
				tmpVarObj= arr[index];
				if(index=="global"||index==file){
					for(var vars in tmpVarObj){
						var vprefix=tmpVarObj[vars].match(/\[\@[0-9a-zA-Z]+\]/g); //Devuelve todos los prefijos en un array
						attr=(vprefix!=null)?'"'+tmpVarObj[vars].replace(/\[\@[0-9a-zA-Z]+\]/g,"")+'"':tmpVarObj[vars].replace(/\[\@[0-9a-zA-Z]+\]/g,"");
						if(index!="global"){
							privateVar=privateVar+vars+"="+attr+"\n";
						}else{
							global=global+vars+"="+attr+"\n";
						}
					}
				}
			}else{
				var vprefix=arr[index].match(/\[\@[0-9a-zA-Z]+\]/g); //Devuelve todos los prefijos en un array
				attr=(vprefix!=null)?'"'+arr[index].replace(/\[\@[0-9a-zA-Z]+\]/g,"")+'"':arr[index].replace(/\[\@[0-9a-zA-Z]+\]/g,"");
				global=global+index+"="+attr+"\n";
			}			
		}
		/* Interprete de Importaciones  */
		_this.createRoutes({"json":imports[file],"callback":function(file,name){
			var json=_this.interpretPrefix(route,file);
			prepend=prepend+json.prepend;
			append=append+json.append;
			last=last+json.last;
		}});
		content="@import '"+this.pathRelative(route,"./library/styflux/styflux.styl")+"'\n"+prepend+"\n"+content+"\n"+append+"\n"+last;
		/* Funcionando Varibles con content de importarcions */
		content=global+privateVar+content;
		_this.createFile(route,content,function(data){
			callback&&callback(content);
		});
	};
	styflux.compile=function(path,params,callback){ //Compilar
		var comnd=params.cmdr || "",
			 dest=params.route || "";
		child = exec("stylus -c "+path+" "+comnd+" "+dest, function (error, stdout, stderr) {
			if (error != null) {console.log(error);}
			callback&&callback();
		});
	};
	styflux.mapFiles=function(dir,ext,ignore,callback){ //Buscador de Archivos, busca archivos segun una extension y devuelve sus rutas
		var _this=this;
		fs.readdir(dir, function(err,files){
			if(err) return console.log(err);
			files.forEach(function(file){
				var nfile=file;		
				file=dir+'/'+file;
				fs.stat(file,function(err,stat){
					if(stat.isDirectory()){
						if(ignore.indexOf(file)==-1){_this.mapFiles(file,ext,ignore,callback);}
					}else{
						(path.extname(file)===ext)?callback&&callback(file,nfile):"";
					};
				});
			});
		});
	};
	styflux.arrmapFiles=function(dir,ext,ignore,result){ //Buscador de Archivos, busca archivos segun una extension y devuelve sus rutas
		var _this=this,
			 res=result || [],
			 files=fs.readdirSync(dir);
		files.forEach(function(file){
			file=dir+'/'+file;
			var status=fs.statSync(file);
			if(status.isDirectory()){
				if(ignore.indexOf(file)==-1){_this.arrmapFiles(file,ext,ignore,res);}
			}else{
				(path.extname(file)===ext)?res.push(file):"";
			}
		});
		return res;
	};
	styflux.dispatchCreate=function(path,name,content){ //Despachador, verifica si es un archivo o un directorio y segun ello toma las acciones respectivas
		var _this=this;		
		if(name.split(".").length==1){
			_this.createDirectory(path,name);
		}else{
			if(typeof content=="object"){				
				_this.readFile(content.path+"/"+content.file,function(data){
					_this.createFile(path+"/"+name,data);
				});				
			}else{
				_this.createFile(path+"/"+name);
			}
		}
	};
	/* Funciones Globales*/
	styflux.createProject=function(routes,dir,source){ //Crea el proyecto en base a las rutas propocionadas
		var _this=this;
		if(typeof routes=="object"){
			for(index in routes){
				if(typeof routes[index]=="string"&&routes[index].split("@").length>1){
					_this.dispatchCreate(dir,index,{"file":routes[index].split("@").join(""),"path":source});
				}else{
					_this.dispatchCreate(dir,index);
				}				
				if(typeof routes[index]=="object"){
					_this.createProject(routes[index],dir+"/"+index,source);
				}
			}
		}else{
			_this.dispatchCreate(dir,routes);
		}
	};
	styflux.compileProject=function(routes,vars,compile){ //Compila el proyecto
		var _this=this;
		for(var i in routes){
			var dir=routes[i]["path"], //Ruta a recorre
				ignore=routes[i]["ignore"], //Rutas a ignorar
				imports=routes[i]["imports"]; //Rutas a importar
			(function(dir,ignore,imports){
				ignore.forEach(function(ign,index){ //Modifica el ignore, anadiendo su ruta base
					ignore[index]=routes[i]["path"]+"/"+ign;
				});

				_this.mapFiles(dir,compile.ext,ignore,function(file,name){ //Devuelve rutas de archivos
					_this.tmpFile(file,function(data,routeTmp){ //Devuelve la lectura del archivo y la ruta temporal
						_this.appendFile(routeTmp,vars,imports,data,function(content){ //Agrega las variables al inicio o al final
							//console.log(routeTmp);
							_this.compile(routeTmp,compile,function(){ //Compila
								//_this.createFile(file,data,function(){ //Crea archivo
									fs.unlink(routeTmp); //Borra temporal
								//});
							});
						});
					});
				});

			})(dir,ignore,imports);
		}
	};
})(typeof exports === "undefined"? styflux={}:exports)